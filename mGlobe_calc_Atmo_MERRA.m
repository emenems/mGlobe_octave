function mGlobe_calc_Atmo_MERRA(Input,output_file,output_file_type,file_ref,file_temp,file_humid,file_height,file_sthd,file_sp,start_calc,end_calc,step_calc,subtract_average)
%MGLOBE_CALC_ATMO_MERRA Main function for the estimation of the atmo. effect
% Function uses inputs generated by the main (GUI) mGlobe function and
% calculates the global atmospheric effect (including local zone) in 
% nm/s^2.
% 
% INPUT:
% Input             ... Point of observation 
%                       [Latitude (deg), Longitude (deg), Height(m)]
%						            Example: [48.24885,16.35650,192.70]
% output_file       ... full output file path
%						            Example: 'ATMO_MERRA_Effect.txt'
% output_file_type  ... File type switch: [xls, txt, tsf]. xls not working in Octave!
%						            Example: [0 1 0]
% file_ref          ... MERRA Orography (*.nc format)
%                       Layers: XDim = longitude (deg)
%                               YDim = latitude (deg)
%                               PHIS = geopotential height (s^-2)
% 						          Example: 'MERRA300_Orography.nc'
% file_temp         ... temperature layers in *.nc format
%                       Layers: longitude, latitude, t, time, levels
% 						          Example: 'MERRA300.prod.assim.inst6_3d_ana_Np.20000101.SUB.nc'
% file_humid        ... specific humidity layers in *.nc format
%                       Layers: longitude, latitude, qv, time, levels
% 						          Example: 'MERRA300.prod.assim.inst6_3d_ana_Np.20000101.SUB.nc'
% file_height       ... geopotential layers in *.nc format
%                       Layers: longitude, latitude, h, time, levels
% 						          Example: 'MERRA300.prod.assim.inst6_3d_ana_Np.20000101.SUB.nc'
% file_sthd         ... surface data (temperature and humidity) grid in 
%						            *.nc format
%                       Layers: longitude, latitude, tlml, qlml
% 						          Example: 'MERRA300.prod.assim.tavg1_2d_flx_Nx.20000101.SUB.nc'
% file_sp         	... surface pressure grid in *.nc format
%                       Layers: longitude, latitude, ps
% 						          Example: 'MERRA300.prod.assim.inst6_3d_ana_Np.20000101.SUB.nc'
% start_calc        ... starting time in matlab format (days)
%						            Example: datenum(2000,1,1,12,0,0)
% end_calc          ... finish time in matlab format (days)
%						            Example: datenum(2000,12,31,12,0,0)
% step_calc         ... time resolution switcher (not in time units)
%						            1 = 3 hours, 2 = 6 hours, 3 = 12 hours, 
%						            4 = one day, 5 = two days
%						            Monthly data are not supported!
%						            Example: 2
% subtract_average  ... subtract average from all output variables except 
%                       model pressure (0,1 = no, yes)
%						            Example: 0
% 
% OUTPUT (saved automatically): 
% date in Matlab format, date civil, total effect, loading part of the
% effect, Newtonian part of the effect, local part, model pressure,
% model temperature, model spec. humidity
% 
%                                         M.Mikolaj, mikolaj@gfz-potsdam.de
%                                                                06.04.2015
%                                                                      v1.0


%% Time settings
set(findobj('Tag','text_status'),'String','Atmo: starting the calculation of global atmospheric effect ...     '); drawnow % write message to GUI
                                                                      
switch step_calc                                                            % create time vector
    case 1
        time_resol_in_days = 3/24;
    case 2
        time_resol_in_days = 6/24;
    case 3 
        time_resol_in_days = 12/24;
    case 4
        time_resol_in_days = 1;
    case 5
        time_resol_in_days = 2;
end
days = start_calc:time_resol_in_days:end_calc;
time = datevec(days);
time(:,7) = days;
clear days
    
%% Constant SETTINGS
R_const = 287;                                                              % J*kg^-1*K*^-1
e_const = 0.62197;                                                          % ratio
a = 6378137;                                                                % WGS84 ellipsoid major axis (m)
b = 6356752.314245;
e = sqrt((a^2-b^2)/a^2);
r = sqrt(1+2/3*e^2+3/5*e^4+4/7*e^6+5/9*e^8+6/11*e^10+7/13*e^12)*b;          % Radius of the replacement sphere -> equal surface
dgE_table_atmo = load('mGlobe_DATA_dgE_Atmo.txt');                          % table for atmospheric loading
dgE_table_atmo(:,1) = dgE_table_atmo(:,1)*pi/180;                           % transform deg to radians

%% Predefine variables
dgE(1:size(time,1),1:4) = 0;                                                % define variable max size for faster computation
dgP(1:size(time,1),1:4) = 0;
row_id_nan(1:size(time,1),1) = 0;                                           % id missing epoch
pressure_interp(1:size(time,1),1) = 0;              
temp_interp(1:size(time,1),1) = 0;
sh_interp(1:size(time,1),1) = 0;
perc_message = linspace(1,99,size(time,1));                                 % status percentage

%% Set calculation properties
memory_mult = 1;                                                            % Change for low memory (RAM) PC (>1 lower resolution, <1 higher resolution)
% Zone 1
delta_zone1 = 0.5*memory_mult;                                              % resolution used in zone 1 (degrees), i.e. for point with spherical distance > treshold_zone1
treshold_zone1 = 20;                                                        % degrees, threshold = spherical rectangle (for zone 1 to 4, zone 5 = spherical circle)
% Zone 2
delta_zone2 = 0.3*memory_mult;                                              % degrees
treshold_zone2 = 1.1;                                                       
% Zone 3
delta_zone3 = 0.017*memory_mult;
treshold_zone3out = 5;                                                      % value must be more than the treshold_zone2 to the diff. between rectangle and circle border
treshold_zone3in = 0.1;                                                    
% Zone 4
delta_zone4 = 0.0009*memory_mult;
treshold_zone4out = treshold_zone3in;
treshold_zone4in = 0.01;
% Zone 5
delta_zone5 = 0.00004*memory_mult;

tic                                                                         % start measuring the time

%% Load orography
ncid_ref = netcdf_open(file_ref,'NC_NOWRITE');                              % open given netCDF files
[ndims,nvars] = netcdf_inq(ncid_ref);                                       % get variable names
for nc = 1:nvars                                                            % load required layers
    varname = netcdf_inqVar(ncid_ref,nc-1);                                 
    switch lower(varname)
        case 'xdim'
            orography.lon = double(netcdf_getVar(ncid_ref,nc-1));          % get longitude
        case 'ydim'
            orography.lat = double(netcdf_getVar(ncid_ref,nc-1));          % get latitude
        case 'phis'
            orography.height = double(netcdf_getVar(ncid_ref,nc-1));         % get orography
            try
                scale_factor = netcdf_getAtt(ncid_ref,nc-1,'scale_factor'); % check if scaling factor does exist
            catch
                scale_factor = 1;
            end
            try
                add_offset = netcdf_getAtt(ncid_ref,nc-1,'add_offset');     % check if offset does exist
            catch
                add_offset = 0;
            end
            orography.height = orography.height'*scale_factor + add_offset;     % scale and transpose the orography matrix
            orography.height = double(orography.height)./9.80665;                       % transform to meters using CONSTANT gravity (no latitude dependency!)
    end
end
[orography.lon,orography.lat] = meshgrid(double(orography.lon),double(orography.lat)); % vectors to matrices
delta_ghm = [abs(orography.lon(1,1)-orography.lon(1,2)) abs(orography.lat(1,1)-orography.lat(2,1))]; % determine model resolution (used only for output file)

%% LOAD OTHER DATA
for i = 1:size(time,1)
    check_out = 0;                                                          % control variable
    try
        ncid_temp = netcdf_open([file_temp(1:end-15),sprintf('%04d%02d%02d.SUB.nc',time(i,1),time(i,2),time(i,3))],'NC_NOWRITE'); % open temperature file
        ncid_humid = netcdf_open([file_humid(1:end-15),sprintf('%04d%02d%02d.SUB.nc',time(i,1),time(i,2),time(i,3))],'NC_NOWRITE'); % open humidity file
        ncid_height = netcdf_open([file_height(1:end-15),sprintf('%04d%02d%02d.SUB.nc',time(i,1),time(i,2),time(i,3))],'NC_NOWRITE'); % open geopotential file
        ncid_stdh = netcdf_open([file_sthd(1:end-15),sprintf('%04d%02d%02d.SUB.nc',time(i,1),time(i,2),time(i,3))],'NC_NOWRITE'); % open surface temperature and humidity
        ncid_sp = netcdf_open([file_sp(1:end-15),sprintf('%04d%02d%02d.SUB.nc',time(i,1),time(i,2),time(i,3))],'NC_NOWRITE'); % open surface pressure file
    catch
        out_message = sprintf('MERRA data file(s) for %04d/%02d/%02d %02dh not found',...
                time(i,1),time(i,2),time(i,3),time(i,4));
        set(findobj('Tag','text_status'),'String',out_message); drawnow     % warn user
        fprintf([out_message,'\n']);
        check_out = 1;                                                      % change control value
    end
    
    if check_out == 0
    %% LOAD TEMPERATURE DATA
    [~,nvars] = netcdf_inq(ncid_temp);                                  % get layers info
    for nc = 1:nvars
        varname = netcdf_inqVar(ncid_temp,nc-1);                            % get layer names
        switch lower(varname)
            case 'longitude'    % old netcdf version             
                temperature.lon = double(netcdf_getVar(ncid_temp,nc-1));   % create longitude variable (vector)
            case 'xdim'         % new netcdf version
                temperature.lon = double(netcdf_getVar(ncid_temp,nc-1)); 
            case 'latitude'
                temperature.lat = double(netcdf_getVar(ncid_temp,nc-1));   % create latitude variable (vector)
            case 'ydim'
                temperature.lat = double(netcdf_getVar(ncid_temp,nc-1));
            case 'time'
                temperature.time = double(netcdf_getVar(ncid_temp,nc-1));  % get time info (vector)
                % Check input time step (either in hours or minutes)
                if temperature.time(end) > 24
                    rid = find(temperature.time == time(i,4)*60);
                else
                    rid = find(temperature.time == time(i,4));
                end
            case 'levels'
                temperature.level = double(netcdf_getVar(ncid_temp,nc-1));
                temperature.level = flipud(temperature.level);              % flip upside down to obtain the same format as ERA = pressure levels are increasing
            case 'height'
                temperature.level = double(netcdf_getVar(ncid_temp,nc-1));
                temperature.level = flipud(temperature.level); 
			  case 't'
                if exist('rid','var') ~=0
                    temperature.data = double(netcdf_getVar(ncid_temp,nc-1,[0 0 0 rid-1],[length(temperature.lon) length(temperature.lat) length(temperature.level) 1])); % create temperature field
                    temperature.data = permute(temperature.data,[2 1 3]); % permute the 4D matrix to required format
                    temperature.data = flipdim(temperature.data,3);         % flip upside down to obtain the same format as ERA
                    temperature.data(temperature.data>=1.0e+14) = NaN;      % remove flagged values
                else
                    % Store layer index for later loading (after loading
                    % time layer needed to get correct indexing)
                    t_nc = nc;
					          check_out = 1;                                          % change the 'check_out' value (>= 1...do not compute the gravity effect)
                end        
        end
    end
	if exist('t_nc','var') == 1
        temperature.data = double(netcdf_getVar(ncid_temp,t_nc-1,[0 0 0 rid-1],[length(temperature.lon) length(temperature.lat) length(temperature.level) 1]));  % create temperature field
        temperature.data = permute(temperature.data,[2 1 3]); % permute the 4D matrix to required format
        temperature.data = flipdim(temperature.data,3);         % flip upside down to obtain the same format as ERA
        temperature.data(temperature.data>=1.0e+14) = NaN;      % remove flagged values
        clear t_nc
        check_out = 0;
    end
    [temperature.lon,temperature.lat] = meshgrid(temperature.lon,temperature.lat); % create the lon/lat matrices
    netcdf_close(ncid_temp);                                                % close the netcdf temperature file
    clear nvars nc add_offset scale_factor rid varname                % remove used variables
    
    %% LOAD SPECIFIC HUMIDITY DATA
    [~,nvars] = netcdf_inq(ncid_humid);                                 % for details see temperature loading
    for nc = 1:nvars
        varname = netcdf_inqVar(ncid_humid,nc-1);
        switch lower(varname)
            case 'longitude'
                humidity.lon = double(netcdf_getVar(ncid_humid,nc-1));
            case 'xdim'
                humidity.lon = double(netcdf_getVar(ncid_humid,nc-1));
            case 'latitude'
                humidity.lat = double(netcdf_getVar(ncid_humid,nc-1));
            case 'ydim'
                humidity.lat = double(netcdf_getVar(ncid_humid,nc-1));
            case 'time'
                humidity.time = double(netcdf_getVar(ncid_humid,nc-1));
                if humidity.time(end) > 24
                    rid = find(humidity.time == time(i,4)*60);
                else
                    rid = find(humidity.time == time(i,4));
                end
            case 'levels'
                humidity.level = double(netcdf_getVar(ncid_humid,nc-1));
                humidity.level = flipud(humidity.level);
            case 'height'
                humidity.level = double(netcdf_getVar(ncid_humid,nc-1));
                humidity.level = flipud(humidity.level);
            case 'qv'
                if exist('rid','var') ~=0
                    humidity.data = double(netcdf_getVar(ncid_humid,nc-1,[0 0 0 rid-1],[length(humidity.lon) length(humidity.lat) length(humidity.level) 1]));
                    humidity.data = permute(humidity.data,[2 1 3]); 
                    humidity.data = flipdim(humidity.data,3);
                    humidity.data(humidity.data>=1.0e+14) = NaN;            % flagged values
                else
                    t_nc = nc;
                    check_out = 1;
                end 
        end
    end
	if exist('t_nc','var') == 1
        humidity.data = double(netcdf_getVar(ncid_humid,t_nc-1,[0 0 0 rid-1],[length(humidity.lon) length(humidity.lat) length(humidity.level) 1]));
		humidity.data = permute(humidity.data,[2 1 3]); 
        humidity.data = flipdim(humidity.data,3);
        humidity.data(humidity.data>=1.0e+14) = NaN;            % flagged values
        clear t_nc
        check_out = 0;
    end
    [humidity.lon,humidity.lat] = meshgrid(humidity.lon,humidity.lat);
    netcdf_close(ncid_humid);
    clear nvars nc add_offset scale_factor rid varname
    
    %% LOAD GEOPOTENTIAL DATA
    [~,nvars] = netcdf_inq(ncid_height);                                % for details see temperature loading
    for nc = 1:nvars
        varname = netcdf_inqVar(ncid_height,nc-1);
        switch lower(varname)
            case 'longitude'
                height.lon = double(netcdf_getVar(ncid_height,nc-1));
            case 'xdim'
                height.lon = double(netcdf_getVar(ncid_height,nc-1));
            case 'latitude'
                height.lat = double(netcdf_getVar(ncid_height,nc-1));
            case 'ydim'
                height.lat = double(netcdf_getVar(ncid_height,nc-1));
            case 'time'
                height.time = double(netcdf_getVar(ncid_height,nc-1));
                if height.time(end) > 24
                    rid = find(height.time == time(i,4)*60);
                else
                    rid = find(height.time == time(i,4));
                end
            case 'levels'
                height.level = double(netcdf_getVar(ncid_height,nc-1));
                height.level = flipud(height.level);
            case 'height'
                height.level = double(netcdf_getVar(ncid_height,nc-1));
                height.level = flipud(height.level);
            case 'h'
                if exist('rid','var') ~=0
                    height.data = double(netcdf_getVar(ncid_height,nc-1,[0 0 0 rid-1],[length(height.lon) length(height.lat) length(height.level) 1]));
                    height.data = permute(height.data,[2 1 3]); % Do not divide by 9.8... (already in metres)
                    height.data = flipdim(height.data,3);
                    height.data(height.data>=1.0e+14) = NaN;                % 
                else
                    t_nc = nc;
                    check_out = 1;
                end   
        end
    end
	if exist('t_nc','var') == 1
        height.data = double(netcdf_getVar(ncid_height,t_nc-1,[0 0 0 rid-1],[length(height.lon) length(height.lat) length(height.level) 1]));
		height.data = permute(height.data,[2 1 3]); % Do not divide by 9.8... (already in metres)
		height.data = flipdim(height.data,3);
		height.data(height.data>=1.0e+14) = NaN;                % 
        clear t_nc
        check_out = 0;
    end
    [height.lon,height.lat] = meshgrid(height.lon,height.lat);
    netcdf_close(ncid_height);
    clear nvars nc add_offset scale_factor rid varname
    
    %% LOAD SURFACE PRESSURE
    [~,nvars] = netcdf_inq(ncid_sp);                                    % for details see temperature loading
    for nc = 1:nvars
        varname = netcdf_inqVar(ncid_sp,nc-1);
        switch lower(varname)
            case 'longitude'
                surface.lon = double(netcdf_getVar(ncid_sp,nc-1));
            case 'xdim'
                surface.lon = double(netcdf_getVar(ncid_sp,nc-1));
            case 'latitude'
                surface.lat = double(netcdf_getVar(ncid_sp,nc-1));
            case 'ydim'
                surface.lat = double(netcdf_getVar(ncid_sp,nc-1));
            case 'time'
                surface.time = double(netcdf_getVar(ncid_sp,nc-1));
                if surface.time(end) > 24
                    rid = find(surface.time == time(i,4)*60);
                else
                    rid = find(surface.time == time(i,4));
                end
            case 'ps'                                                       % surface pressure
                if exist('rid','var') ~=0
                    surface.pressure = double(netcdf_getVar(ncid_sp,nc-1,[0 0 rid-1],[length(surface.lon) length(surface.lat) 1]));
                    surface.pressure = surface.pressure';
                    surface.pressure(surface.pressure>=1.0e+10) = NaN;                % 
                else
                    t_nc = nc;
					check_out = 1;
                end   
        end
    end
    if exist('t_nc','var') == 1
        surface.pressure = double(netcdf_getVar(ncid_sp,t_nc-1,[0 0 rid-1],[length(surface.lon) length(surface.lat) 1]));
		surface.pressure = surface.pressure';
		surface.pressure(surface.pressure>=1.0e+10) = NaN;                % 
        clear t_nc
        check_out = 0;
    end
    [surface.lon,surface.lat] = meshgrid(surface.lon,surface.lat);
    netcdf_close(ncid_sp);
    clear nvars nc add_offset scale_factor rid varname
    
    %% LOAD SURFACE TEMP/HUMID/DENSITY
    [~,nvars] = netcdf_inq(ncid_stdh);                                    % for details see temperature loading
    for nc = 1:nvars
        varname = netcdf_inqVar(ncid_stdh,nc-1);
        switch lower(varname)
            case 'longitude'
                surface.lon = double(netcdf_getVar(ncid_stdh,nc-1));
            case 'xdim'
                surface.lon = double(netcdf_getVar(ncid_stdh,nc-1));
            case 'latitude'
                surface.lat = double(netcdf_getVar(ncid_stdh,nc-1));
            case 'ydim'
                surface.lat = double(netcdf_getVar(ncid_stdh,nc-1));
            case 'time'
                surface.time = double(netcdf_getVar(ncid_stdh,nc-1));
                if surface.time(end) > 24
                    rid = find(surface.time == time(i,4)*60);
                else
                    rid = find(surface.time == time(i,4));
                end
            case 'tlml'                                                     % surface/lowest level temperature
                if exist('rid','var') ~=0 && numel(surface.lat)<1500 && numel(surface.lon)<1500 % additional check if time and XDim/YDim have been loaded
                    surface.temperature = double(netcdf_getVar(ncid_stdh,nc-1,[0 0 rid-1],[length(surface.lon) length(surface.lat) 1]));
                    surface.temperature = surface.temperature';
                else
                    t_nc = nc;
                    check_out = 1;
                end   
            case 'qlml'                                                     % surface/lowest level humidity
                if exist('rid','var') ~=0 && numel(surface.lat)<1500 && numel(surface.lon)<1500 % additional check if time and XDim/YDim have been loaded
                    surface.humidity = double(netcdf_getVar(ncid_stdh,nc-1,[0 0 rid-1],[length(surface.lon) length(surface.lat) 1]));
                    surface.humidity = surface.humidity';
                    surface.humidity(surface.humidity>=1.0e+10) = NaN;      
                else
                    h_nc = nc;
                    check_out = 1;
                end   
        end
    end
    % Create grid if not done already (in previous 'surface pressure' 
    % loading section)
    if numel(surface.lat)<1500 && numel(surface.lon)<1500
        [surface.lon,surface.lat] = meshgrid(surface.lon,surface.lat);
    end
	  if exist('t_nc','var') == 1
        surface.temperature = double(netcdf_getVar(ncid_stdh,t_nc-1,[0 0 rid-1],[size(surface.lon,2) size(surface.lat,1) 1]));
		surface.temperature = surface.temperature';
		clear t_nc
    end
    if exist('h_nc','var') == 1
        surface.humidity = double(netcdf_getVar(ncid_stdh,h_nc-1,[0 0 rid-1],[size(surface.lon,2) size(surface.lat,1) 1]));
		surface.humidity = surface.humidity';
		surface.humidity(surface.humidity>=1.0e+10) = NaN;      
		clear h_nc
        check_out = 0;
    end
    netcdf_close(ncid_stdh);
    clear nvars nc add_offset scale_factor rid varname
    
    %% PREPARE VARIABLES
    % Check the dimension of loaded dataset
    check_lat(1) = sum(sum(orography.lat ~= height.lat));
    check_lat(2) = sum(sum(orography.lat ~= surface.lat));
    check_lat(3) = sum(sum(orography.lat ~= humidity.lat));
    check_lat(4) = sum(sum(orography.lat ~= temperature.lat));
    max_level = length(height.level);
    check_level(1) = (max_level >= 42 && length(height.level) == max_level)-1; % minum number of levels = 42 (37 for ERA)
    check_level(2) = (max_level >= 42 && length(temperature.level) == max_level)-1;
    check_level(3) = (max_level >= 42 && length(humidity.level) == max_level)-1;
    else
        check_lat = 1; check_level = 1;
    end
    try
        % check if everything was loaded
        temperature.data(1,1,1)+humidity.data(1,1,1)+surface.pressure(1,1)+surface.humidity(1,1)+surface.temperature(1,1); % check sum
    catch
        check_level = 1;
    end
    
    if (sum(check_lat) == 0) && (sum(check_level)+check_out == 0) % continue only if everything was OK
        for di = 1:max_level                                                % transform pressure levels to density levels
            density.data(:,:,di) = (height.level(di)*100)./(R_const*temperature.data(:,:,di).*(1 - humidity.data(:,:,di) + (humidity.data(:,:,di)./e_const)));
        end
        surface.density = surface.pressure./(R_const.*surface.temperature.*(1 - surface.humidity + (surface.humidity./e_const)));
        surface.height = orography.height;                                  % surface height == orography !
        surface.lon = orography.lon;                                        % must be equal
        surface.lat = orography.lat;                                        % must be equal
        hd_interp = interp2(surface.lon,surface.lat,surface.height,Input(2),Input(1)); % interpolate height of gravimeter (sensor height is neglected)
        clear di humidity temperature check_lon check_lat check_time check_level % remove used variables
        
        %% FIRST ZONE
        z = 1;
        if ~exist('dgE1','var')                                             % initialization for the first zone
            boundries1 = [-180+delta_zone1/2 -90+delta_zone1/2;180-delta_zone1/2 90-delta_zone1/2]; % calculation area
            [dgE1,la_out1,fi_out1,la_grid1,fi_grid1,zone_id1] = mGlobe_calc_atmo_loading(Input(2),Input(1),boundries1,delta_zone1,dgE_table_atmo,r,treshold_zone1,[]); % compute loading effect
            dgP1 = mGlobe_calc_atmo_newton(Input(2),Input(1),Input(3),la_grid1,fi_grid1,surface,height,density,zone_id1,r,'2D',[]); % 2D newton effect only for first zone
            [pressure0,DataID1] = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid1,fi_grid1,1); % interpolate surface pressure
        end
        pressure0 = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid1,fi_grid1,0); % interpolate surface pressure
        dgE(i,z) = sum(sum(dgE1(DataID1==1).*pressure0(DataID1==1)/100))*1e9; % multiply and add all cells (*100 to convert from Pa to hPa)
        dgP(i,z) = sum(sum(dgP1.*pressure0))*1e9;                             % multiply and add all cells (dgP1 is in m/s^2/Pa)
        clear pressure0 boundries1
        
        %% SECOND ZONE
        z = 2;
        if ~exist('dgE2','var') 
            boundries2 = [min(min(la_out1))-delta_zone1/2+delta_zone2/2  min(min(fi_out1))-delta_zone1/2+delta_zone2/2;...
                          max(max(la_out1))+delta_zone1/2-delta_zone2/2  max(max(fi_out1))+delta_zone1/2-delta_zone2/2];
            clear la_out1 fi_out1
            [dgE2,la_out2,fi_out2,la_grid2,fi_grid2,zone_id2] = mGlobe_calc_atmo_loading(Input(2),Input(1),boundries2,delta_zone2,dgE_table_atmo,r,treshold_zone2,[]);
            [oro2,DataID2] = mGlobe_interpolation(surface.lon,surface.lat,surface.height,la_grid2,fi_grid2,1); % interpolate orography height
        end
        pressure0 = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid2,fi_grid2,0); % interpolate surface pressure
        dgE(i,z) = sum(sum(dgE2(DataID2==1).*pressure0(DataID2==1)/100))*1e9; % multiply and add all cells (*100 to convert from Pa to hPa) 
        dgP2 = mGlobe_calc_atmo_newton(Input(2),Input(1),hd_interp,la_grid2,fi_grid2,surface,height,density,zone_id2,r,'3D',max_level,oro2);
        dgP(i,z) = sum(dgP2)*1e9;                                           % sum all layers and convert to nm/s^2
        clear dgP2 boundries2 pressure0 
        
        %% THIRD ZONE
        z = 3;
        if ~exist('dgE3','var') 
            boundries3 = [min(min(la_out2))-delta_zone2/2+delta_zone3/2  min(min(fi_out2))-delta_zone2/2+delta_zone3/2;...
                          max(max(la_out2))+delta_zone2/2-delta_zone3/2  max(max(fi_out2))+delta_zone2/2-delta_zone3/2];
            clear la_out2 fi_out2
            [dgE3,la_out3,fi_out3,la_grid3,fi_grid3,zone_id3] = mGlobe_calc_atmo_loading(Input(2),Input(1),boundries3,delta_zone3,dgE_table_atmo,r,treshold_zone3in,treshold_zone3out);
            [oro3,DataID3] = mGlobe_interpolation(surface.lon,surface.lat,surface.height,la_grid3,fi_grid3,1); % interpolate orography height
        end
        pressure0 = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid3,fi_grid3,0); % interpolate surface pressure
        dgE(i,z) = sum(sum(dgE3(DataID3==1).*pressure0(DataID3==1)/100))*1e9; % multiply and add all cells (*100 to convert from Pa to hPa)
        dgP3 = mGlobe_calc_atmo_newton(Input(2),Input(1),hd_interp,la_grid3,fi_grid3,surface,height,density,zone_id3,r,'3D',max_level,oro3);
        dgP(i,z) = sum(dgP3)*1e9;                                           % sum all layers and convert to nm/s^2
        clear boundries3 pressure0
        
        %% FOURTH ZONE
        z = 4;                                                              % local zone (4th+5th) 
        if ~exist('dgE4','var') 
            boundries4 = [min(min(la_out3))-delta_zone3/2+delta_zone4/2  min(min(fi_out3))-delta_zone3/2+delta_zone4/2;...
                          max(max(la_out3))+delta_zone3/2-delta_zone4/2  max(max(fi_out3))+delta_zone3/2-delta_zone4/2];
            clear la_out3 fi_out3
            [dgE4,la_out4,fi_out4,la_grid4,fi_grid4,zone_id4] = mGlobe_calc_atmo_loading(Input(2),Input(1),boundries4,delta_zone4,dgE_table_atmo,r,treshold_zone4in,treshold_zone4out);
            dgE4(isnan(dgE4)) = 0;
            [oro4,DataID4] = mGlobe_interpolation(surface.lon,surface.lat,surface.height,la_grid4,fi_grid4,1); % interpolate orography height
        end                                                                % Standard procedure
		dgP4 = mGlobe_calc_atmo_newton(Input(2),Input(1),hd_interp,la_grid4,fi_grid4,surface,height,density,zone_id4,r,'3D',max_level,oro4); % only orography
		pressure0 = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid4,fi_grid4,0); % interpolate surface pressure
        dgE(i,z) = sum(sum(dgE4(DataID4==1).*pressure0(DataID4==1)/100))*1e9; % Loading effect: multiply and add all cells (*100 to convert from Pa to hPa)
        dgP(i,z) = sum(dgP4)*1e9;                                           % Gravitational effect: sum all layers and convert to nm/s^2
        clear dgP4 pressure0
        
        %% FIFTH ZONE
        z = 5;                                                              % zone with the highest resolution
        if ~exist('dgE5','var') 
            boundries5 = [min(min(la_out4))-delta_zone4/2+delta_zone5/2  min(min(fi_out4))-delta_zone4/2+delta_zone5/2;...
                          max(max(la_out4))+delta_zone4/2-delta_zone5/2  max(max(fi_out4))+delta_zone4/2-delta_zone5/2];
            [dgE5,la_out5,fi_out5,la_grid5,fi_grid5,zone_id5] = mGlobe_calc_atmo_loading(Input(2),Input(1),boundries5,delta_zone5,dgE_table_atmo,r,0,treshold_zone4in);
            clear boundries5 la_out4 fi_out4 la_out5 fi_out5                % delete redundant variables
            dgE5(isnan(dgE5)) = 0;                                      
            [oro5,DataID5] = mGlobe_interpolation(surface.lon,surface.lat,surface.height,la_grid5,fi_grid5,1); % interpolate surface pressure
        end
        
        clear  la_out5 fi_out5
        dgP5 = mGlobe_calc_atmo_newton(Input(2),Input(1),hd_interp,la_grid5,fi_grid5,surface,height,density,zone_id5,r,'3D',max_level,oro5); % only orography
		pressure_interp(i,1) = interp2(surface.lon,surface.lat,surface.pressure,Input(2),Input(1)); % interpolate pressure for given gravimeter coordinates (output)
		temp_interp(i,1) = interp2(surface.lon,surface.lat,surface.temperature,Input(2),Input(1));  % interpolate temperature for given gravimeter coordinates (output)
		sh_interp(i,1) = interp2(surface.lon,surface.lat,surface.humidity,Input(2),Input(1));       % interpolate spec. humidity for given gravimeter coordinates (output)
		pressure0 = mGlobe_interpolation(surface.lon,surface.lat,surface.pressure,la_grid5,fi_grid5,0); % interpolate surface pressure
		dgE(i,z) = sum(sum(dgE5(DataID5==1).*pressure0(DataID5==1)/100))*1e9; % multiply and add all cells (*100 to convert from Pa to hPa)
        dgP(i,z) = sum(dgP5)*1e9;                                           % sum all layers and convert to nm/s^2
        clear dgP5 pressure0 temperature0
        if size(time,1) > 4
            out_message = sprintf('Atmo: Calculating atmospheric effect ... (%3.0f%%)',round(perc_message(i))); % create message
        else
            out_message = sprintf('Atmo: Calculating atmospheric effect ...    '); % create message
        end
        set(findobj('Tag','text_status'),'String',out_message); drawnow     % write message to GUI
    else
        row_id_nan(i,1) = 1;                                                % ID for not loaded time epochs
    end
end

if sum(sum(abs(dgE(~isnan(dgE))))) > 0
    set(findobj('Tag','text_status'),'String','Atmo: writing output file(s) ...'); drawnow % write message to GUI
    %% Clear used variables and prepare results
    total = dgE + dgP;                                                      % sum all effects          
    total_write = sum(total,2);
    dgE_write = sum(dgE(:,1:3),2);
    dgP_write = sum(dgP(:,1:3),2);
    dgE_write_local = dgE(:,4)+dgE(:,5);
    dgP_write_local = dgP(:,4)+dgP(:,5);
    total_write(row_id_nan == 1) = NaN;                                     % set not loaded time epochs to NaN
    dgE_write(row_id_nan == 1) = NaN;
    dgP_write(row_id_nan == 1) = NaN;
    dgE_write_local(row_id_nan == 1) = NaN;
    dgP_write_local(row_id_nan == 1) = NaN;
    pressure_interp(row_id_nan == 1,:) = NaN;
    temp_interp(row_id_nan == 1,:) = NaN;
    sh_interp(row_id_nan == 1,:) = NaN;
    if subtract_average == 1
        dgE_write = dgE_write - mean(dgE_write(~isnan(dgE_write)));
        dgP_write = dgP_write - mean(dgP_write(~isnan(dgP_write)));
        total_write = total_write - mean(total_write(~isnan(total_write)));
        dgE_write_local = dgE_write_local - mean(dgE_write_local(~isnan(dgE_write_local)));
        dgP_write_local = dgP_write_local - mean(dgP_write_local(~isnan(dgP_write_local)));
    end
    %% Output xls
    duration = toc;
    set(findobj('Tag','text_status'),'String','Atmo: Writing output file...');drawnow
    if output_file_type(1) == 1
        try
        table = {'Results of the GAE calculation'};
        table(2,1:5) = {'Coord.:','phi','lambda','height (given)','height (orography)'};
        table(3,1) = {'Station'};
        table(3,2) = num2cell(Input(1)); table(3,3) = num2cell(Input(2)); 
        table(3,4) = num2cell(Input(3));table(3,5) = num2cell(hd_interp);
        table(4,1) = {'Calculation settings:'}; 
        table(5,1) = {'Orography used:'};table(5,3) = {file_ref};
        table(6,1) = {'Surface data:'};table(6,3) = {file_sthd};table(6,4) = {file_sp};
        table(7,1) = {'Geopotential data:'};table(7,3) = {file_height};
        table(8,1) = {'Temperature data:'};table(8,3) = {file_temp};
        table(9,1) = {'Specific humidity data:'};table(9,3) = {file_humid};
        table(10,1) = {'Subtract average:'};
        if subtract_average == 1
            table(10,3) = {'on'};
        else
            table(10,3) = {'off'};
        end
        table(11,1) = {'Model:'};table(11,3) = {'MERRA'};
        table(12,1) = {'Model res.:'};
        table(12,3) = {sprintf('%3.2fx%3.2f deg',delta_ghm(1),delta_ghm(2))};
        if step_calc == 6
            table(12,4) = {'Monthly'};
        else
            table(12,4) = {'Daily/hourly'};
        end
        table(13,1) = {'Pressure levels:'};table(13,3) = {max_level};
        table(14,1) = {'Atmospheric ocean loading: no atmo. loading part on ocean'};
        table(15,1) = {'GAE/LAE threshold (deg):'};
        table(15,3) = num2cell(0.1);
        table(16,1) = {'Calc. date:'};
        table(16,2:7) = num2cell(clock);
        table(17,1) = {'Calc. duration (min):'};
        table(17,3) = num2cell(duration/60);
        table(18,1) = {'Flagged value: empty cell'};
        table(19,1) = {'Results (in nm/s^2)'};
        table(20,1:15) = {'time_matlab','year','month','day','hour','minute','second','total_effect','global_loading','global_newton','local_loading','local_newton','model_pressure (Pa)','model_temp (K)','model_sh (kg/kg)'};
        if size(time(:,7),1) >=65536                                        % write xls only if the total number of rows < max allowed Excel length
            output_file_type(2) = 1;                                        % in such case, the results will be written only to txt/tsoft format
            output_file_xls = output_file(1:end-4);
            table(21,1) = {'Data to long for excel file-for results,see created txt file'};
            xlswrite([output_file_xls 'xls'],table);
        else
            table(21:21+size(total,1)-1,1) = num2cell(time(:,7));
            table(21:21+size(total,1)-1,2:7) = num2cell(datevec(time(:,7)));
            table(21:21+size(total,1)-1,8) = num2cell(total_write);
            table(21:21+size(total,1)-1,9) = num2cell(dgE_write);
            table(21:21+size(total,1)-1,10) = num2cell(dgP_write);
            table(21:21+size(total,1)-1,11) = num2cell(dgE_write_local);
            table(21:21+size(total,1)-1,12) = num2cell(dgP_write_local);
            table(21:21+size(total,1)-1,13) = num2cell(pressure_interp);
            table(21:21+size(total,1)-1,14) = num2cell(temp_interp);
            table(21:21+size(total,1)-1,15) = num2cell(sh_interp);
            output_file_xls = output_file(1:end-4);
            xlswrite([output_file_xls '.xls'],table);
        end
        catch
            set(findobj('Tag','text_status'),'String','Atmo: Could not write xls file (see *.txt for results)...');drawnow
            fprintf('Ocean: Could not write xls file (see *.txt for results)...\n');
            output_file_type(2) = 1;
        end
    end
    %% Output txt
    if output_file_type(2) == 1  
        try
        output_file_txt = output_file(1:end-4);
        fid = fopen([output_file_txt '.txt'],'w');
        fprintf(fid,'%% Results of the GAE calculation\n');
        fprintf(fid,'%% Station latitude (deg):   \t%10.8f\n',Input(1));
        fprintf(fid,'%% Station longitude (deg):   \t%10.8f\n',Input(2));
        fprintf(fid,'%% Station height given / orography (m):       \t%8.3f / %8.3f\n',Input(3),hd_interp);
        fprintf(fid,'%% Calculation settings:\n'); 
        fprintf(fid,'%% Orography:\t%s\n',file_ref);
        fprintf(fid,'%% Surface data:\t%s and %s\n',file_sthd,file_sp);
        fprintf(fid,'%% Geopotential data:\t%s\n',file_height);
        fprintf(fid,'%% Temperature data:\t%s\n',file_temp);
        fprintf(fid,'%% Specific humidity data:\t%s\n',file_humid);
        if subtract_average == 1
            fprintf(fid,'%% Subtract average: on\n');
        else
            fprintf(fid,'%% Subtract average: off\n');
        end
        fprintf(fid,'%% Model:\t %s\n','MERRA');
        fprintf(fid,'%% Model resolution:\t%3.2fx%3.2f deg, ',delta_ghm(1),delta_ghm(2));
        if step_calc == 6
            fprintf(fid,'Monthly\n');
        else 
            fprintf(fid,'Daily/hourly\n');
        end
        fprintf(fid,'%% Atmospheric ocean loading: no atmo. loading part on ocean\n');
        fprintf(fid,'%% GAE/LAE threshold (deg):\t%5.2f\n',0.1);
        fprintf(fid,'%% Maximum pressure level:\t%2.0f\n',max_level);
        ctime = clock;
        fprintf(fid,'%% Calc. date:\t%04d/%02d/%02d %02d:%02d:%02d\n',ctime(1),ctime(2),ctime(3),ctime(4),ctime(5),round(ctime(6)));
        fprintf(fid,'%% Calculation duration (min):\t%5.2f\n',duration/60);
        fprintf(fid,'%% Flagged values: NaN\n');
        fprintf(fid,'%% Result units: nm/s^2\n');
        fprintf(fid,'%% time_matlab\tDate\tTime\ttotal_eff\tglobal_load\tglobal_newton\tlocal_load\tlocal_newton\tmodel_pressure(Pa)\tmodel_temp(K)\tmodel_sh(kg/kg)\n');
        [year,month,day,hour,minute,second] = datevec(time(:,7));
        for i = 1:length(time(:,7));
        fprintf(fid,'%15.8f\t%4d%02d%02d\t%02d%02d%02d%10.2f%10.2f%10.2f%10.2f%10.2f%10.2f%10.2f%10.6f\n',...
            time(i,7),year(i),month(i),day(i),hour(i),minute(i),second(i),...
            total_write(i),dgE_write(i),dgP_write(i),...
            dgE_write_local(i),dgP_write_local(i),pressure_interp(i),temp_interp(i),sh_interp(i));
        end
        fclose('all');
        catch
            set(findobj('Tag','text_status'),'String','GAE: Could not write txt file...');drawnow
        end
    end
    %% Output tsf
    if output_file_type(3) == 1  
        try
        output_file_tsf = output_file(1:end-4);
        fid = fopen([output_file_tsf '.tsf'],'w');
        fprintf(fid,'[TSF-file] v01.0\n\n');
        fprintf(fid,'[UNDETVAL] 1234567.89\n\n');
		% Set not computed time epochs to missing data flag
        total_write(row_id_nan == 1) = 1234567.89;
        dgE_write(row_id_nan == 1) = 1234567.89;
        dgP_write(row_id_nan == 1) = 1234567.89;
        sum_for_tsf = total_write;
        sum_for_tsf(row_id_nan == 1) = 1234567.89;
        pressure_interp(row_id_nan == 1) = 1234567.89;
        temp_interp(row_id_nan == 1) = 1234567.89;
        sh_interp(row_id_nan == 1) = 1234567.89;
		dgE_write_local(row_id_nan == 1) = 1234567.89;
		dgP_write_local(row_id_nan == 1) = 1234567.89;
		% Set other possible NaNs to missing data flag
        dgE_write(isnan(dgE_write)) = 1234567.89;
        dgP_write(isnan(dgP_write)) = 1234567.89;
        sum_for_tsf(isnan(sum_for_tsf)) = 1234567.89;
        pressure_interp(isnan(pressure_interp)) = 1234567.89;
        temp_interp(isnan(temp_interp)) = 1234567.89;
        sh_interp(isnan(sh_interp)) = 1234567.89;
		dgE_write_local(isnan(dgE_write_local)) = 1234567.89;
		dgP_write_local(isnan(dgP_write_local)) = 1234567.89;
        fprintf(fid,'[TIMEFORMAT] DATETIME\n\n');
        fprintf(fid,'[INCREMENT] %8.3f\n\n',time_resol_in_days*24*60*60);
        fprintf(fid,'[CHANNELS]\n');
        fprintf(fid,' Location:%s:total_effect\n','mGlobe'); 
        fprintf(fid,' Location:%s:atmospheric_global_loading_effect\n','mGlobe'); 
        fprintf(fid,' Location:%s:atmospheric_global_newtonian_effect\n','mGlobe'); 
        fprintf(fid,' Location:%s:atmospheric_local_loading_effect\n','mGlobe'); 
        fprintf(fid,' Location:%s:atmospheric_local_newtonian_effect\n','mGlobe');
        fprintf(fid,' Location:%s:model_pressure\n','mGlobe'); 
        fprintf(fid,' Location:%s:model_temperature\n','mGlobe');
        fprintf(fid,' Location:%s:model_spec.humidity\n\n','mGlobe');
        fprintf(fid,'[UNITS]\n nm/s^2\n nm/s^2\n nm/s^2\n nm/s^2\n nm/s^2\n Pa\n K\n kg/kg\n\n');
        fprintf(fid,'[COMMENT]\n');
		fprintf(fid,' Station latitude (deg):   \t%10.8f\n',Input(1));
        fprintf(fid,' Station longitude (deg):   \t%10.8f\n',Input(2));
        fprintf(fid,' Station height given / orography (m):       \t%8.3f / %8.3f\n',Input(3),hd_interp);
        fprintf(fid,' Calculation settings:\n'); 
        fprintf(fid,' Orography:\t%s\n',file_ref);
        fprintf(fid,' Surface data:\t%s and %s\n',file_sthd,file_sp);
        fprintf(fid,' Geopotential data:\t%s\n',file_height);
        fprintf(fid,' Temperature data:\t%s\n',file_temp);
        fprintf(fid,' Specific humidity data:\t%s\n',file_humid);
        if subtract_average == 1
            fprintf(fid,' Subtract average: on\n');
        else
            fprintf(fid,' Subtract average: off\n');
        end
        fprintf(fid,' Model:\t %s\n','MERRA');
        fprintf(fid,' Model resolution:\t%3.2fx%3.2f deg, ',delta_ghm(1),delta_ghm(2));
        if step_calc == 6
            fprintf(fid,'Monthly\n');
        else 
            fprintf(fid,'Daily/hourly\n');
        end
        fprintf(fid,' Atmospheric ocean loading: no atmo. loading part on ocean\n');
        fprintf(fid,' GAE/LAE threshold (deg):\t%5.2f\n',0.1);
        fprintf(fid,' Maximum pressure level:\t%2.0f\n',max_level);
        ctime = clock;
        fprintf(fid,' Calc. date:\t%04d/%02d/%02d %02d:%02d:%02d\n\n',ctime(1),ctime(2),ctime(3),ctime(4),ctime(5),round(ctime(6)));
        fprintf(fid,'[COUNTINFO] %8.0f\n\n',length(time(:,7)));
        fprintf(fid,'[DATA]\n');
        [year,month,day,hour,minute,second] = datevec(time(:,7));clear i
        for i = 1:length(time(:,7));
        fprintf(fid,'%04d %02d %02d  %02d %02d %02d   %14.3f%14.3f%14.3f%14.3f%14.3f%14.3f%14.3f%14.5f\n',...
            year(i),month(i),day(i),hour(i),minute(i),second(i),...
            sum_for_tsf(i),dgE_write(i),dgP_write(i),...
            dgE_write_local(i),dgP_write_local(i),pressure_interp(i),temp_interp(i),sh_interp(i));
        end
        fclose('all');
        catch
            fclose('all');
            set(findobj('Tag','text_status'),'String','Atmo: Could not write tsf file...');drawnow
        end
    end
    set(findobj('Tag','text_status'),'String','Atmo: GAE calculated...');drawnow % write final message
else
    set(findobj('Tag','text_status'),'String','Atmo: No results obtained...(no MERRA file input)');drawnow  
end